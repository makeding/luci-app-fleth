#!/bin/sh
# author: huggy<fleth@huggy.moe>

DNS_E=2404:1a8:7f01:a::3
DNS_W=2001:a7ff:5f01::a

h_ENABLED=$(uci get fleth.global.enabled)
h_TYPE=auto
h_TUNNEL_INTERFACE=$(uci get fleth.global.interface)
h_TUNNEL_INTERFACE_MTU=$(uci get fleth.global.mtu)
h_TUNNEL_INTERFACE_zone=$(uci get fleth.global.interface_zone)
h_UPLINK_INTERFACE=$(uci get fleth.global.interface6)
h_IP6PREFIX_ENABLED=$(uci get fleth.global.ip6prefix_enabled)
h_CRON_DHCPV6_RENEW_ENABLED=$(uci get fleth.global.cron_dhcpv6_renew_enabled)

if [ -z "$h_ENABLED" ] || [ -z "$h_TYPE" ] || [ -z "$h_TUNNEL_INTERFACE" ] || [ -z "$h_TUNNEL_INTERFACE_MTU" ] || [ -z "$h_UPLINK_INTERFACE" ]; then
    echo "Failed to retrieve one or more configuration values"
    exit 1
fi

# real xxxx
r_TYPE="UNKNOWN"
# DS-Lite
r_AFTR=""
r_AFTR_DOMAIN="UNKNOWN"
# map-e
r_PEERADDR=""
r_IPADDR=""
r_IP4PREFIXLEN=""
r_IP6PREFIX=""
r_IP6PREFIXLEN=""
r_EALEN=""
r_PSIDLEN=""
r_OFFSET=""


e_AREA="UNKNOWN"

get_area(){
    # east or west
    if [ -f /tmp/resolv.conf.d/resolv.conf.auto ]; then
        if grep -q "flets-east.jp" /tmp/resolv.conf.d/resolv.conf.auto; then
            e_AREA="EAST"
            DNS=$DNS_E
        elif grep -q "flets-west.jp" /tmp/resolv.conf.d/resolv.conf.auto; then
            e_AREA="WEST"
            DNS=$DNS_W
        fi
    fi
    if [ "$e_AREA" = "UNKNOWN" ]; then
        wget --timeout=1 -s "http://[2404:1a8:f401:100::1]/l/__healthcheck" -O /tmp/null > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            e_AREA="EAST"
            DNS=$DNS_E
        else
            wget --timeout=1 -s "http://[2001:a7ff:ff0e:1::2]/l/__healthcheck" -O /tmp/null > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                e_AREA="WEST"
                DNS=$DNS_W
            fi
        fi
    fi
    
    echo $e_AREA
}

get_pending_status(){
    # Check if IPv6 address is in specific ranges to determine pending status
    local ipv6=$(get_uplink_interface_ipv6)
    if [ -n "$ipv6" ]; then
        # East ranges: 2001:c90::/32, 2404:1a8::/32, 2408::/22
        if echo "$ipv6" | grep -qE '^2001:c90:|^2404:1a8:|^2408:|^2409:|^240a:|^240b:'; then
            logger -t fleth "Detected East IPv6 address in pending state: $ipv6"
            echo "_pending"
            return
        # West ranges: 2001:d70::/30, 2001:a000::/21
        elif echo "$ipv6" | grep -qE '^2001:d70:|^2001:d71:|^2001:d72:|^2001:d73:|^2001:a0[0-7]'; then
            logger -t fleth "Detected West IPv6 address in pending state: $ipv6"
            echo "_pending"
            return
        fi
    fi
    echo ""
}

get_AAAA_record() {
    local domain=$1
    result=$(timeout 2 nslookup -type=AAAA $domain $DNS 2>/dev/null | grep "Address:")
    if [ -n "$result" ]; then
        # get line=2
        echo "$result" | awk 'NR==2' | awk '{print $2}'
    else
        echo ""
    fi
}

check_ipv6_reachability() {
    local ip=$1
    if ping6 -c 1 -w 2 "$ip" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

check_interface_proto_invalid() {
    local status=$(ifstatus $1 2>/dev/null)
    if echo "$status" | grep -q '"proto": "none"'; then
        return 0
    else
        return 1
    fi
}

get_uplink_interface_ipv6() {
    ipv6_address=$(ifstatus ${h_UPLINK_INTERFACE} | grep '"address"' | awk -F '"' '{print $4}' | grep -vE '^(fe80|fc00|fd00|fd50|::|::1|::ffff:0:0|::/96)' | head -n 1)
    echo $ipv6_address
}

# https://ipv4.web.fc2.com/map-e.html
get_mape_provider() {
    # I can't rewritten calc logic with shell, asking lua for help
    t_DATA=$(lua /usr/sbin/fleth-map-e.lua calc "$ipv6_address")
    # kanashii code kana
    # yo ku wa ka ra na i
    printf "%s" "$t_DATA"
    if [ "$t_DATA" != "UNKNOWN" ]; then
        t_i=0
        while IFS= read -r line; do
            t_i=$((t_i + 1))
            case "$t_i" in
                3) r_PEERADDR=$line ;;
                4) r_IPADDR=$line ;;
                5) r_IP4PREFIXLEN=$line ;;
                6) r_IP6PREFIX=$line ;;
                7) r_IP6PREFIXLEN=$line ;;
                8) r_EALEN=$line ;;
                9) r_PSIDLEN=$line ;;
                10) r_OFFSET=$line ;;
            esac
        done << EOF
$t_DATA
EOF
        r_TYPE="map-e"
    fi
}

# https://qiita.com/site_u/items/b6d5097f5e3a0f91c95d
get_dslite_provider(){
    # check type with DS-LITE
    # 1. transix can't be resolved outside
    t_TRANSIX=$(get_AAAA_record "gw.transix.jp")
    if [ -n "$t_TRANSIX" ]; then
        r_TYPE="ds-lite"
        r_AFTR=$t_TRANSIX
        r_AFTR_DOMAIN="gw.transix.jp"
    else
        # 2. xpass can be resolved outside but can't ping
        # http://checkv6.xpass.jp/check_address.php
        t_XPASS=$(get_AAAA_record "dgw.xpass.jp")
        if check_ipv6_reachability $t_XPASS; then
            r_TYPE="ds-lite"
            r_AFTR=$t_XPASS
            r_AFTR_DOMAIN="dgw.xpass.jp"
        else
            # 3. v6connect can't be resolved outside
            # curl http://route6.asahi-net.jp/v1/address
            t_ASAHI=$(get_AAAA_record "dslite.v6connect.net")
            if [ -n "$t_ASAHI" ]; then
                r_TYPE="ds-lite"
                r_AFTR=$t_ASAHI
                r_AFTR_DOMAIN="dslite.v6connect.net"
            fi
        fi
    fi
    echo $r_AFTR
}

set_interface() {
    current_proto=$(uci get network.${h_TUNNEL_INTERFACE}.proto)
    current_peeraddrdomain=$(uci get network.${h_TUNNEL_INTERFACE}.peeraddrdomain)
    current_tunlink=$(uci get network.${h_UPLINK_INTERFACE}.tunlink)
    current_mtu=$(uci get network.${h_TUNNEL_INTERFACE}.mtu)
    current_zone_index=$(uci show firewall | grep -E "firewall.@zone\[[0-9]+\].network=.*'$h_TUNNEL_INTERFACE'" | sed -n "s/.*@zone\[\([0-9]\+\)\].*/\1/p")
    new_zone_index=$(uci show firewall | grep -E "firewall.@zone\[[0-9]+\].name='$h_TUNNEL_INTERFACE_zone'" | sed -n "s/.*@zone\[\([0-9]\+\)\].*/\1/p")

    if [ "$r_TYPE" = 'ds-lite' ]; then
        if [ -z "$r_AFTR" ] || [ -z "$h_TUNNEL_INTERFACE" ] || [ -z "$h_TUNNEL_INTERFACE_MTU" ] || [ -z "$h_UPLINK_INTERFACE" ]; then
            echo "Failed to retrieve one or more configuration values"
            exit 1
        elif [ "$current_peeraddrdomain" != "$r_AFTR_DOMAIN" ] ||
           [ "$current_tunlink" != "$h_TUNNEL_INTERFACE" ] ||
           [ "$current_proto" != 'dslite' ] ||
           [ "$current_mtu" != "$h_TUNNEL_INTERFACE_MTU" ]; then
            uci batch <<EOF
set network.${h_TUNNEL_INTERFACE}=interface
set network.${h_TUNNEL_INTERFACE}.proto='dslite'
set network.${h_TUNNEL_INTERFACE}.peeraddr='${r_AFTR}'
set network.${h_TUNNEL_INTERFACE}.peeraddrdomain='${r_AFTR_DOMAIN}'
set network.${h_TUNNEL_INTERFACE}.tunlink='${h_UPLINK_INTERFACE}'
set network.${h_TUNNEL_INTERFACE}.mtu='${h_TUNNEL_INTERFACE_MTU}'
set network.${h_TUNNEL_INTERFACE}.encaplimit='ignore'
EOF
            uci delete network.${h_TUNNEL_INTERFACE}.device > /dev/null
            if [ "$new_zone_index" != "$current_zone_index" ]; then
                uci del_list firewall.@zone[$current_zone_index].network="$h_TUNNEL_INTERFACE"
                uci add_list firewall.@zone[$new_zone_index].network="$h_TUNNEL_INTERFACE"
            fi
            uci commit
            ifdown ${h_TUNNEL_INTERFACE} && sleep 2 && ifup ${h_TUNNEL_INTERFACE}
            logger -t fleth "New ds-lite configuratin committed ${h_TUNNEL_INTERFACE}=${r_AFTR}"
        fi
    elif [ "$r_TYPE" = 'map-e' ]; then
        current_ipaddr=$(uci get network.${h_TUNNEL_INTERFACE}.ipaddr)
        current_ip4prefixlen=$(uci get network.${h_TUNNEL_INTERFACE}.ip4prefixlen)
        current_ip6prefix=$(uci get network.${h_TUNNEL_INTERFACE}.ip6prefix)
        current_ip6prefixlen=$(uci get network.${h_TUNNEL_INTERFACE}.ip6prefixlen)
        current_ealen=$(uci get network.${h_TUNNEL_INTERFACE}.ealen)
        current_psidlen=$(uci get network.${h_TUNNEL_INTERFACE}.psidlen)
        current_offset=$(uci get network.${h_TUNNEL_INTERFACE}.offset)
        if [ "$current_peeraddr" != "$r_PEERADDR" ] ||
            [ "$current_tunlink" != "$h_TUNNEL_INTERFACE" ] ||
            [ "$current_proto" != 'map' ] ||
            [ "$current_mtu" != "$h_TUNNEL_INTERFACE_MTU" ] ||
            [ "$current_ipaddr" != "$r_IPADDR" ] ||
            [ "$current_ip4prefixlen" != "$r_IP4PREFIXLEN" ] ||
            [ "$current_ip6prefix" != "$r_IP6PREFIX" ] ||
            [ "$current_ip6prefixlen" != "$r_IP6PREFIXLEN" ] ||
            [ "$current_ealen" != "$r_EALEN" ] ||
            [ "$current_psidlen" != "$r_PSIDLEN" ] ||
            [ "$current_offset" != "$r_OFFSET" ]; then
            uci batch <<EOF
set network.${h_TUNNEL_INTERFACE}=interface
set network.${h_TUNNEL_INTERFACE}.proto='map'
set network.${h_TUNNEL_INTERFACE}.maptype='map-e'
set network.${h_TUNNEL_INTERFACE}.peeraddr='${r_PEERADDR}'
set network.${h_TUNNEL_INTERFACE}.ipaddr='${r_IPADDR}'
set network.${h_TUNNEL_INTERFACE}.ip4prefixlen='${r_IP4PREFIXLEN}'
set network.${h_TUNNEL_INTERFACE}.ip6prefix='${r_IP6PREFIX}'
set network.${h_TUNNEL_INTERFACE}.ip6prefixlen='${r_IP6PREFIXLEN}'
set network.${h_TUNNEL_INTERFACE}.ealen='${r_EALEN}'
set network.${h_TUNNEL_INTERFACE}.psidlen='${r_PSIDLEN}'
set network.${h_TUNNEL_INTERFACE}.offset='${r_OFFSET}'

set network.${h_TUNNEL_INTERFACE}.tunlink='${h_UPLINK_INTERFACE}'
set network.${h_TUNNEL_INTERFACE}.mtu='${h_TUNNEL_INTERFACE_MTU}'
set network.${h_TUNNEL_INTERFACE}.legacymap='1'
set network.${h_TUNNEL_INTERFACE}.encaplimit='ignore'
EOF
            uci delete network.${h_TUNNEL_INTERFACE}.device > /dev/null
            if [ "$new_zone_index" != "$current_zone_index" ]; then
                uci del_list firewall.@zone[$current_zone_index].network="$h_TUNNEL_INTERFACE"
                uci add_list firewall.@zone[$new_zone_index].network="$h_TUNNEL_INTERFACE"
            fi
            uci commit
            ifdown ${h_TUNNEL_INTERFACE} && sleep 2 && ifup ${h_TUNNEL_INTERFACE}
            logger -t fleth "New map-e configuratin committed ${h_TUNNEL_INTERFACE}=${r_PEERADDR}"
        fi
    elif [ "$new_zone_index" != "$current_zone_index" ]; then
        uci del_list firewall.@zone[$current_zone_index].network="$h_TUNNEL_INTERFACE"
        uci add_list firewall.@zone[$new_zone_index].network="$h_TUNNEL_INTERFACE"
        uci commit firewall
    fi
    if check_interface_proto_invalid ${h_TUNNEL_INTERFACE}; then
        logger -t fleth "Network Restarting"
        /etc/init.d/network restart
    fi
}

if [ "$1" = "auto" ]; then
    logger -t fleth "is running $h_ENABLED"
    if [ "$h_IP6PREFIX_ENABLED" == "1" ]; then
        $0 ip6prefix &
    elif [ "$h_IP6PREFIX_ENABLED" == "0" ]; then
        uci delete network.${h_UPLINK_INTERFACE}.ip6prefix
        uci delete network.${h_UPLINK_INTERFACE}.extendprefix
        uci commit
    fi
    if [ "$h_CRON_DHCPV6_RENEW_ENABLED" == "1" ]; then
        INTERFACE=${h_UPLINK_INTERFACE} ACTION=ifup /etc/hotplug.d/iface/70-fleth-cross-dhcpv6-renew &
    elif [ "$h_CRON_DHCPV6_RENEW_ENABLED" == "0" ]; then
        INTERFACE=${h_UPLINK_INTERFACE} ACTION=ifdown /etc/hotplug.d/iface/70-fleth-cross-dhcpv6-renew &
    fi
    if [ "$h_ENABLED" == "1" ]; then
        get_uplink_interface_ipv6 > /dev/null
        get_mape_provider > /dev/null
        if [ "$r_TYPE" = "UNKNOWN" ]; then
            get_area
            get_dslite_provider
        fi
        if [ "$r_TYPE" = "UNKNOWN" ]; then
            logger -t fleth "Can't detect network type ${h_UPLINK_INTERFACE}=${ipv6_address}"
        else
            set_interface
        fi
    fi

elif [ "$1" = "status" ]; then
    get_area > /dev/null
    get_dslite_provider > /dev/null
    echo ${e_AREA}
    echo $r_AFTR_DOMAIN
elif [ "$1" = "mape_status" ]; then
    get_uplink_interface_ipv6 > /dev/null
    get_mape_provider
elif [ "$1" = "get_area" ]; then
    get_area > /dev/null
    echo ${e_AREA}
elif [ "$1" = "get_dslite_provider" ]; then
    get_area > /dev/null
    get_dslite_provider > /dev/null
    echo $r_AFTR_DOMAIN
elif [ "$1" = "pending_status" ]; then
    get_pending_status
elif [ "$1" = "hook_none.js" ]; then
    if ! grep -q 'fleth-hook.js' /www/luci-static/resources/protocol/none.js; then
        $0 restore_none.js
        sed -i "s|return|if(location.pathname==='/cgi-bin/luci/admin/network/firewall/forwards'){try{const script=document.createElement('script');script.src='/luci-static/resources/view/fleth-hook.js';document.head.appendChild(script);}catch(error){console.warn(error);}}return|" /www/luci-static/resources/protocol/none.js
    fi
elif [ "$1" = "restore_none.js" ]; then
    printf "'use strict';'require network';return network.registerProtocol('none',{getI18n:function(){return _('Unmanaged');}});" > /www/luci-static/resources/protocol/none.js
elif [ "$h_IP6PREFIX_ENABLED" -eq 1 ] && [ "$1" = "ip6prefix" ]; then
    uci set network.${h_UPLINK_INTERFACE}.extendprefix=1
    uci delete network.${h_UPLINK_INTERFACE}.ip6prefix
    uci commit network.${h_UPLINK_INTERFACE}
else
    echo "Flet'h by huggy"
    echo "Flet'h is a helper that can configure your IPv4 over IPv6 tunnel automatically."
    echo ""
    echo "Usage: fleth {auto|ip6prefix|status|mape_status|get_area|get_dslite_provider|pending_status|hook_none.js|restore_none.js}"
    echo "auto                Configure the tunnel settings based on current state and config."
    echo "ip6prefix           Configure the IPv6 prefix process."
    echo "status              Show the current area and DS-Lite AFTR domain."
    echo "mape_status         Show the current MAP-E provider details."
    echo "get_dslite_provider Show the current DS-Lite provider details."
    echo "get_area            Show the current area information."
    echo "pending_status      Show if the service is in pending state."
    echo "hook_none.js        Install the fleth hook in none.js to hook port-forward page."
    echo "restore_none.js     Restore the none.js to its default state."
    echo ""
    echo "To modify settings, try these examples below:"
    echo "uci show fleth.global"
    echo "uci set fleth.global.enabled=1"
    echo "uci commit"
    echo ""
    echo "For more details, consult the documentation:"
    echo "https://fleth.huggy.moe/"
fi
